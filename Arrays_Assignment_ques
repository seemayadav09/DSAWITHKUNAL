ques 1
https://leetcode.com/problems/build-array-from-permutation/ 


class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans=new int[nums.length];
        
        for(int i=0;i<nums.length;i++){
             ans[i]=nums[nums[i]];

        }
        return ans;
        
    }
}




ques 2
https://leetcode.com/problems/concatenation-of-array/ 

class Solution {
    public int[] getConcatenation(int[] nums) {
        int[] ans=new int[2*nums.length];
        for(int i=0;i<2*nums.length;i++){
            if(i<nums.length){
                ans[i]=nums[i];
            }else{
                ans[i]=nums[i-nums.length];
            }
        }
        return ans;
    }
}

ques 3
https://leetcode.com/problems/running-sum-of-1d-array/ 

class Solution {
    public int[] runningSum(int[] nums) {
        int[] ans=new int[nums.length];
        ans[0]=nums[0];
        
        for(int i=1;i<nums.length;i++){
            int sum=0;
            for(int j=0;j<i;j++){
                sum=sum+nums[j];
                ans[i]=nums[i]+sum;
            }
        }
        return ans;
        
    }
}

ques 4
https://leetcode.com/problems/richest-customer-wealth/ 

class Solution {
    public int maximumWealth(int[][] accounts) {
        int[] wealth=new int[accounts.length];
        
        int maxwealth=0;
        for(int i=0;i<accounts.length;i++){
            int sum=0;
            
            for(int j=0;j<accounts[i].length;j++){
                sum=sum+accounts[i][j];
            }
            wealth[i]=sum;
            if(wealth[i]>maxwealth){
                maxwealth=wealth[i];

            }
            
        }
    }
}

ques 5
https://leetcode.com/problems/shuffle-the-array/ 

class Solution {
    public int[] shuffle(int[] nums, int n) {
        
        // Rotate the element to the left
        for (int i = 0, q = 1, k = n; i < n; i++, k++, q++){
            for (int j = k; j > i + q; j--) {
                // swap a[j-1], a[j]
                int temp = nums[j - 1];
                nums[j - 1] = nums[j];
                nums[j] = temp;
            }
        }
        return nums;
        
            
    

    }
        
    
}
